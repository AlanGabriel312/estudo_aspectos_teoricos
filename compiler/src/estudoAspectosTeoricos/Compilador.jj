/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
  LOOKAHEAD = 1;
}

PARSER_BEGIN(Compilador)
package estudoAspectosTeoricos;

import java.io.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Compilador
{
  private static Map<String, Integer> symbolTable = new HashMap<>();
  public static void main(String args []) throws ParseException
  {
    Scanner scanner = new Scanner(System.in);
    System.out.println("Enter your input:");
    StringBuilder inputBuilder = new StringBuilder();
    while (scanner.hasNextLine()) {
      String line = scanner.nextLine();
      if (line.isEmpty()) {
        break; // Stop reading input on an empty line
      }
      inputBuilder.append(line).append("\n");
    }
    String input = inputBuilder.toString();
    InputStream stream = new ByteArrayInputStream(input.getBytes());
    Compilador parser = new Compilador(stream);
    String result = parser.program();
    System.out.println(result);
    writeToFile("output.js", result);
  }

  private static void writeToFile(String filename, String content) throws IOException {
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
      writer.write("const symbolTable = " + content + ";");
    }
  }

  private static int lookup(String id) {
    Integer value = symbolTable.get(id);
    if (value == null) {
      throw new Error("Variable " + id + " is not defined.");
    }
    return value;
  }

  private static void assign(String id, int value) {
    if (!symbolTable.containsKey(id)) {
      throw new Error("Variable " + id + " is not defined.");
    }
    symbolTable.put(id, value);
  }

  public static String symbolTableToString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    for (Map.Entry<String, Integer> entry : symbolTable.entrySet()) {
        sb.append("  \"").append(entry.getKey()).append("\": ").append(entry.getValue()).append(",\n");
    }
    if (!symbolTable.isEmpty()) {
        sb.setLength(sb.length() - 2); // Remove a última vírgula e nova linha
    }
    sb.append("\n}");
    return sb.toString();
  }
}

PARSER_END(Compilador)

SKIP : {
  " " | "\t" | "\n" | "\r"
}

TOKEN : {
  < LET: "let" >
| < VAR: "var" >
| < IF: "if" >
| < ELSE: "else" >
| < NUMBER_TYPE: "number" >
| < STRING_TYPE: "string" >
| < CHAR_TYPE: "char" >
| < BOOL_TYPE: "bool" >
| < TRUE: "true" >
| < FALSE: "false" >
| < EQ: "==" >
| < NEQ: "!=" >
| < LT: "<" >
| < GT: ">" >
| < LE: "<=" >
| < GE: ">=" >
| < PLUS: "+" >
| < ASSIGN: "=" >
| < IDENTIFIER: (<LETTER>)+(<LETTER>|<DIGIT>)* >
| < NUMBER_LITERAL: (<DIGIT>)+ >
| < STRING_LITERAL: "\"" (~["\""])* "\"" >
| < CHAR_LITERAL: "'" ~["'"] "'" >
| < #LETTER: ["a"-"z", "A"-"Z"] >
| < #DIGIT: ["0"-"9"] >
}

String program() :
{
  int result;
}
{
  result = statement_list()
  { return Compilador.symbolTableToString(); }
}

int statement_list() :
{
  int result = 0;
}
{
  result = statement()
  (
    statement()
  )*
  { return result; }
}

int statement() :
{
  int result = 0;
}
{
  ( variable_declaration()
  | assignment()
  | result = if_else_statement()
  | result = expression_statement() )
  { return result; }
}

void variable_declaration() :
{
  Token id;
}
{
  ( <LET> id = <IDENTIFIER> ":" type() ";"
  { Compilador.symbolTable.put(id.image, 0); }
  | <VAR> id = <IDENTIFIER> ":" type() ";"
  { Compilador.symbolTable.put(id.image, 0); } )
}

void assignment() :
{
  Token id;
  int value;
}
{
  id = <IDENTIFIER> <ASSIGN> value = expression() ";"
  { assign(id.image, value); }
}

int if_else_statement() :
{
  int result = 0;
}
{
  <IF> "(" expression() ")" "{" result = statement_list() "}"
  [ <ELSE> "{" result = statement_list() "}" ]
  { return result; }
}

int expression_statement() :
{
  int result;
}
{
  result = expression() ";"
  { return result; }
}

int expression() :
{
  int result, term1, term2;
}
{
  term1 = term()
  (
    <PLUS> term2 = term() { term1 += term2; }
  )*
  { return term1; }
}

int term() :
{
  int result;
}
{
  result = factor()
  { return result; }
}

int factor() throws ParseException:
{
  Token t;
}
{
  (t = <NUMBER_LITERAL> { return Integer.parseInt(t.image); })
| (t = <IDENTIFIER>
    {
      if (Compilador.symbolTable.containsKey(t.image)) {
        return lookup(t.image);
      } else {
        throw new Error("Variable " + t.image + " is not defined.");
      }
    }
  )
| "(" expression() ")"
}

void type() :
{}
{
  <NUMBER_TYPE>
| <STRING_TYPE>
| <CHAR_TYPE>
| <BOOL_TYPE>
}

void comparison_operator() :
{}
{
  <EQ>
| <NEQ>
| <LT>
| <GT>
| <LE>
| <GE>
}